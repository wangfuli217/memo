问题其实就是你期望的东西和你体验的东西之间的差别.

代码写多了才意识到，程序员的竞争力并不是写代码，也并不是哪门语言或者框架， 其核心竞争力是通过技术解决问题的能力
上级说的不一定是对的，老师说的不一定是对，学术机构说的也不一定是对，媒体说的也不一定是对，声音大的更不一定是对，毕竟有理不在言高
make it run, make it fast, make it beautiful.   技术可能是商业里面最不重要的
代码写多了才意识到，程序员的竞争力并不是写代码，也并不是哪门语言或者框架， 其核心竞争力是通过技术解决问题的能力，又何必再去拘泥于哪门具体的编程语言或技术呢。

不管看上去如何, 人们很少知道他们要什么, 直到你给了他们所要求的东西。 并没有多少人真的希望他们的问题被解决。 首先要对自己真诚


    那些没有经验的问题解决者们,几乎无一例外,都是去匆忙的寻找解决办法,而不是先给要解决的问题下定义.即使是有经验的问题解决者们,在社会压力要求他匆忙决定的时候,也很容易屈服.
这样,他们会找到得到很多解决办法,但未必适合手头这个问题.当一个人努力让别人接受他赞成的解决方法的时候,总是指责别人太顽固,而不是说对方的观点其实是可以替代的.

对于那些没有幽默感的人,帮他们解决问题简直就是自寻烦恼.


不要把他们的解决方法误认为是问题的定义.
不要把问题的解决方法误认为是问题的定义 -- 特别是在你使用自己的解决方法时.

如果你太轻易地解决了他们的问题,他们永远都不会相信你真的解决了他们的问题.

道德考虑遇到有利可图的问题时往往很快就烟消云散了.

你永远都不能肯定你已经有了一个正确的定义,即使在问题已经解决之后.
你永远也不能肯定你有了一个正确的定义,但是永远不要放弃寻求它的努力.

每种解决方法都会带来新的问题.我们永远都不能消灭问题.问题、解决方法以及新的问题交织成一条无穷无尽的锁链.我们能期望的最好结果就是新的问题没有我们"解决了"的那个那么棘手.

问题最难以处理的部分恰恰是去意识到它们的存在.


如果在你对问题的理解中,你想不出至少 3 样可能出错的东西,那么你并没有真正的理解这个问题.
在任何一次问题定义中,可能会有成百上千的东西被忽视了.如果你连 3 个都想不出来,只能说你根本不能或者不愿意思考.


不相称的解决方法就是那种给要和使用这种解决办法的人们带来不协调的后果的解决方法.只要人们意识到它的存在,大多数不相称都很容易解决.


每一种新的观点都会带来新的不相称.


当你在寻找问题定义的道路上疲倦地游荡时,不要忘记随时都回头看看,看看你是不是已经迷路了.

一旦你用文字来表述一个问题,请仔细推敲这些文字以使这种表述在每个人的头脑中都是一个意思.

当别人能够很好地解决自己问题的时候,千万不要越俎代庖.如果这是他们的麻烦,就让它成为他们的麻烦.

如果某人能够解决这个问题,但是他本人却并不会遇到这一问题时,那么你们首先要做的就是让他也感受到这一问题.

问题的根源常常在你自己身上.

在这个世界上有两种人,一种人做事,另一种人给别人找事做.离第二种人远一点,这样你就会很顺利.
在这个世界上有两种人,一种人做事,另一种人享受荣誉.待在第一种人中间――那里的竞争要少得多.


传统上称为"解决问题"的很多情况实际上都是解决智力测验.智力题大多故意出的很难――但是这种难度恰恰暗指着一个出题人.
但是我们知道,如果问题没有某种不寻常的难度,出题人不会选择它的.具有讽刺意味的是,这种增加难度的企图恰好可以给我们一个线索.


我们永远没有足够的时间来把它做好,但是我们总有足够的时间来重新做一遍.我们永远没有足够的时间来考虑我们是否真的需要它,但是我们总是有足够的时间来为之后悔.

重复的刺激会导致反应越来越小.适应性允许我们忽略我们环境中恒久不变的东西,这样会使我们的生活简单化.
