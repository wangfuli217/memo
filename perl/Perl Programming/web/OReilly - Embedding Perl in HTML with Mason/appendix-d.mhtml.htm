<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head><meta http-equiv="pragma" content="no-cache">
<title>
The Mason Book
</title>
<link rel="stylesheet" type="text/css" href="tppmsgs/msgs0.htm#1" tppabs="http://www.masonbook.com/masonbook.mcss?no_style=0">
</head>

<body>

<div class="bodybox">

 <div class="titlebox">

  <div class="titleboximage">
   <a href="tppmsgs/msgs0.htm#2" tppabs="http://www.masonbook.com/"><img src="cover_small.jpg" tppabs="http://www.masonbook.com/i/cover_small.jpg" width="110" height="144" class="smallcover" alt="Small cover"></a>
  </div>

  <div class="titleboxtext">

   <span class="booktitle">Embedding Perl in HTML with Mason</span><br>
   <span class="bookauthors">Dave Rolsky<br>Ken Williams</span>

  </div>

 </div>

 <div class="mainbox">
  <div class="mainbox2">

   <div class="menubox">
    <h4 id="here">Here</h4>


    <a href="tppmsgs/msgs0.htm#4" tppabs="http://www.masonbook.com/index.mhtml">Home</a><br>
    <a href="tppmsgs/msgs0.htm#5" tppabs="http://www.masonbook.com/news/">News</a><br>
    <b>Read it online</b><br>
    <a href="tppmsgs/msgs0.htm#6" tppabs="http://www.masonbook.com/source/">Example Code</a><br>
    <a href="tppmsgs/msgs0.htm#7" tppabs="http://www.masonbook.com/authors.mhtml">Authors</a><br>
    <a href="tppmsgs/msgs0.htm#8" tppabs="http://www.masonbook.com/errata.mhtml">Errata</a><br>
    <a href="tppmsgs/msgs0.htm#9" tppabs="http://www.masonbook.com/quotes.mhtml">Praise</a><br>
    <a href="tppmsgs/msgs0.htm#10" tppabs="http://www.masonbook.com/contact.mhtml">Contact us</a><br>
    <a href="tppmsgs/msgs0.htm#11" tppabs="http://www.masonbook.com/buy.mhtml">Buy the book!</a>


    <h4 class="menu">There</h4>
    <a href="tppmsgs/msgs0.htm#12" tppabs="http://www.masonhq.com/">Mason HQ</a><br>
    <a href="tppmsgs/msgs0.htm#13" tppabs="http://www.oreilly.com/">O'Reilly</a><br>
    <a href="tppmsgs/msgs0.htm#14" tppabs="http://perl.apache.org/">mod_perl</a>
   </div>

<p class="book-menu">
<a href="index.mhtml.htm" tppabs="http://www.masonbook.com/book/index.mhtml">Table of Contents</a>
|
<a href="foreword.mhtml.htm" tppabs="http://www.masonbook.com/book/foreword.mhtml">Foreword</a>
|
<a href="preface.mhtml.htm" tppabs="http://www.masonbook.com/book/preface.mhtml">Preface</a>
<br>
Chapters: 
<a href="chapter-1.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-1.mhtml">1</a>
<a href="chapter-2.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-2.mhtml">2</a>
<a href="chapter-3.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-3.mhtml">3</a>
<a href="chapter-4.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-4.mhtml">4</a>
<a href="chapter-5.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-5.mhtml">5</a>
<a href="chapter-6.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-6.mhtml">6</a>
<a href="chapter-7.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-7.mhtml">7</a>
<a href="chapter-8.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-8.mhtml">8</a>
<a href="chapter-9.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-9.mhtml">9</a>
<a href="chapter-10.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-10.mhtml">10</a>
<a href="chapter-11.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-11.mhtml">11</a>
<a href="chapter-12.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-12.mhtml">12</a>
<br>
Appendices:
<a href="appendix-a.mhtml.htm" tppabs="http://www.masonbook.com/book/appendix-a.mhtml">A</a>
<a href="appendix-b.mhtml.htm" tppabs="http://www.masonbook.com/book/appendix-b.mhtml">B</a>
<a href="appendix-c.mhtml.htm" tppabs="http://www.masonbook.com/book/appendix-c.mhtml">C</a>
<b>D</b>
<br>
<a href="glossary.mhtml.htm" tppabs="http://www.masonbook.com/book/glossary.mhtml">Glossary</a>
|
<a href="colophon.mhtml.htm" tppabs="http://www.masonbook.com/book/colophon.mhtml">Colophon</a>
|
<a href="copyright.mhtml.htm" tppabs="http://www.masonbook.com/book/copyright.mhtml">Copyright</a>
</p>




<hr width="80%" align="left">

<a name="TOC-ANCHOR-0"></a>
<h1>Appendix D: Content Management with Bricolage</h1><p class="content">
<a name="APP-D"></a>

</p>
<blockquote>
<p class="blockquote">
This appendix was kindly written for this book by David Wheeler, Bricolage
Maintainer, <a href="mailto:david@wheeler.net">david@wheeler.net</a>.
</p>

</blockquote>

<p class="content">
As your site grows, the amount of content to be managed grows. At some point --
particularly if you're part of a large organization with a <em>lot</em> of pages on its site -- the amount of content that needs to be continually
updated becomes unwieldy. Most sites start out with one or two people doing
everything manually in a text editor and then FTPing the files to the web
server. As the demands on the site grow, savvy site operators discover and
deploy flexible templating systems such as Mason to ease the demands of site
management.
</p>
<p class="content">
However, for all its flexibility and power, Mason still requires manual updates
to its files. By using Mason, you may reduce the number of files you have to
edit every time your marketing department wants to change its message from
&quot;adaptively monetizing holistic market-driven systems&quot; to
&quot;utilizing proactive meta-services,&quot;<sup><a href="#FOOTNOTE-ANCHOR-1">1</a></sup><a name="RETURN-ANCHOR-1"></a> but wouldn't it be nice if the marketing department could make those changes
itself, without having to bother you? And wouldn't it be helpful if the
interface for making those changes was simple enough for every user in your
organization to comprehend and use?
</p>
<p class="content">
Content management systems (CMSs) endeavor (or at least claim) to respond to
such wishes. The <a name="perlhtmlmason-IDXTERM-1245"></a>
<a name="perlhtmlmason-IDXTERM-1246"></a>
 CMS market is a packed one, with entries from startups to established industry
players. But if you're reading this book, it's safe to assume that you'd be
most interested in a Perl-oriented, or perhaps even <em>Mason</em>-oriented, CMS.
</p>
<p class="content">
<a name="perlhtmlmason-IDXTERM-1247"></a>
 Bricolage is such a CMS. It is built on Mason, and you can use it to build
large Mason-powered sites as well as sites driven by other technologies.
</p>
<p class="content">
The idea behind a CMS is to centrally manage content in such a way that any
user who needs to edit text, graphics, or other media can do so through a
structured interface. The presentation of content for editing is independent of
the final format of the content or of the distribution of the content to your
site. All such content is managed by a version control system, so that its
history can be reviewed and the content rolled back to an earlier version if
necessary. Furthermore, content moves through a workflow that subjects it to
various stages of review and approval before publication and distribution. And
when published, the  CMS formats the content for output by pushing it through content-independent
formatting templates created for that purpose. (See the Bricolage Terminology sidebar, later in this chapter, for definitions of some
of the terms carelessly littered throughout this paragraph.)
</p>
<p class="content">
These features form the foundation for Bricolage, a robust, actively developed
open-source CMS built to centrally support a distributed organization of
content and formatting specialists via an intuitive, browser-based interface.
By rigidly separating content from formatting, Bricolage allows nontechnical
users to quickly update and publish content relevant to them without having to
coordinate with the production folks for formatting in HTML or with IT for
getting the content on the site. Rather, a marketing wordsmith or copy editor
can search for and check out the &quot;story&quot; (as text-based Bricolage
content is called) that needs changing, make the changes, and then check in and
possibly publish the story. Bricolage handles formatting the story, writing it
to a file, and distributing the file to the production web server -- all
without the alignment of stars that a traditional, hand-maintained
infrastructure requires.
</p>
<p class="content">
A brief introduction to Bricolage follows, including the basics of installation
and configuration, terminology, element administration, content editing, and
template development. Although Bricolage offers many more features than those
presented here (indeed, comprehensive documentation of  Bricolage could fill its <em>own</em> book!), the majority of your and your users' time will be spent on these
tasks. And don't worry, we'll soon get to the importance of Mason for
formatting content. So let's install it and get going!
</p>
<a name="TOC-ANCHOR-1"></a>
<h2>Installing Bricolage</h2><p class="content">
<a name="APP-D-SECT-1"></a>

</p>
<p class="content">
<a name="perlhtmlmason-IDXTERM-1251"></a>
 Bricolage is a complex application with a long list of requirements.
Nevertheless, it strives to make installation and configuration as painless as
possible. The key to an easy Bricolage installation is to get its requirements
satisfied ahead of time. The Bricolage installation process does its best to
verify those dependencies and to suggest what you need to complete the
installation.
</p>
<p class="content">
To get started, download Bricolage from its home page, <a href="tppmsgs/msgs0.htm#70" tppabs="http://www.bricolage.cc/">http://www.bricolage.cc/</a>, and unpack it. Bricolage uses a standard <code>make</code> process for its installation, so simply execute the following:
</p>
<div class="example-code">
<pre>  cd bricolage-1.x.x
  make</pre>
</div><p class="content">
The first thing the <code>make</code> process does is verify that you have all the necessary software requirements
satisfied. Thus it's a convenient first step since, based on its printout,
you'll know very quickly what it needs installed that's not already on your
system.
</p>
<p class="content">
Fortunately, the list of requirements consists of well-known and widely
deployed applications and libraries. Indeed, some of the more popular GNU/Linux
distributions, notably Red Hat and Debian, are compatible with Bricolage.
Binary RPMs and DEBs can be used to install Perl, Apache, and PostgreSQL on
those platforms, and Bricolage supports FreeBSD and the ports-installed
versions of Perl, Apache, and PostgreSQL, too. Bricolage even runs well on Mac
OS X! Consult the platform-specific <u>README</u> files that come with the Bricolage distribution and the <u>INSTALL</u> file for detailed installation instructions.
</p>
<p class="content">
Here's a quick overview of what you'll need to run Bricolage:
</p>
<ul>
<li>
<div class="book-list-item-heading">
Perl</div>
<p class="content">
<a name="IXT-D-295"></a>

</p>
<p class="content">
The first thing you'll need to run Bricolage is Perl 5.6 or later (5.6.1 is <em>strongly</em> recommended, since it fixes many bugs in 5.6.0). Although Mason supports
earlier versions of Perl, Bricolage's design and many of its key features
demand the feature set provided by Perl 5.6. To compile and install Perl
yourself, download it from <a href="tppmsgs/msgs0.htm#71" tppabs="http://www.perl.com/">http://www.perl.com/</a> and follow its installation instructions.
</p>
</li>
<li>
<div class="book-list-item-heading">
PostgreSQL</div>
<p class="content">
Bricolage stores the vast majority of its data in a PostgreSQL database.<a name="IXT-D-296"></a>

</p>
<p class="content">
PostgreSQL is a well-respected open source RDBMS with an impressive feature
set. Download PostgreSQL 7.1 or later (Version 7.2 or later is <em>strongly</em> recommended) from <a href="tppmsgs/msgs0.htm#72" tppabs="http://www.postgresql.org/">http://www.postgresql.org/</a>. If you're installing it manually, be sure to compile it with the <code>--enable-multibyte=UNICODE</code> configuration option, as Bricolage stores all text in Unicode character
encoding.
</p>
</li>
<li>
<div class="book-list-item-heading">
Perl modules</div>
<p class="content">
<a name="IXT-D-297"></a>

</p>
<p class="content">
Bricolage provides a comprehensive feature set thanks in large part to the
benefits of the CPAN. As a natural result, Bricolage requires quite a lot of
CPAN modules to be installed -- more than 30 as of this writing. The simplest
way to install them all is to let Bricolage's <code>make</code> process use the <code>CPAN</code> module to download and install everything for you. If you don't have dedicated
Net access while running <code>make</code>, check the <u>INSTALL</u> file for a list of the required modules you'll need to acquire and install.
</p>
</li>
<li>
<div class="book-list-item-heading">
Apache/mod_perl</div>
<p class="content">
The Mason-powered Bricolage user interface is browser-based. It therefore
requires the Apache web server and <code>mod_perl</code>. The process for installing Apache and <code>mod_perl</code> to work with Bricolage is no different than your typical install, so if you've
already installed Apache and <code>mod_perl</code> for Mason, it should also work fine for Bricolage. Note that at the time of
this writing, Apache 2.0 and <code>mod_perl</code> 2.0 have not been tested with Bricolage; you'll need to install the latest 1.3
Apache and 1.x <code>mod_perl</code>. You can also optionally include support for secure sockets (e.g., <code>mod_ssl</code>) in your Apache install. Doing so allows Bricolage to encrypt passwords for
logging in and even provides an option to encrypt all requests, so that remote
users can protect all content they're editing. Download <code>mod_perl</code> from <a href="tppmsgs/msgs0.htm#14" tppabs="http://perl.apache.org/">http://perl.apache.org/</a> and Apache from <a href="tppmsgs/msgs0.htm#58" tppabs="http://httpd.apache.org/">http://httpd.apache.org/</a>. For SSL support use either <code>mod_ssl</code> (<a href="tppmsgs/msgs0.htm#73" tppabs="http://www.modssl.org/">http://www.modssl.org</a>) or Apache-SSL (<a href="tppmsgs/msgs0.htm#74" tppabs="http://www.apache-ssl.org/">http://www.apache-ssl.org</a>); both require the OpenSSL library (<a href="tppmsgs/msgs0.htm#75" tppabs="http://www.openssl.org/">http://www.openssl.org</a>).
</p>

</ul>
<p class="content">
Once all the preceding pieces are in place and functioning, return to the
Bricolage source directory and run <code>make</code> again:
</p>
<div class="example-code">
<pre>  cd bricolage-1.x.x
  make</pre>
</div><p class="content">
Once <code>make</code> has verified all of the necessary dependencies, it will prompt you for other
important information relevant to the installation, such as the Apache
username, the PostgreSQL administrator name and password, the name to be given
to the Bricolage PostgreSQL database, and the name and password of the
PostgreSQL user for Bricolage itself to use. Consult the <u>INSTALL</u> file for more information on the options these prompts set. Once you've
successfully answered all of its questions, <code>make</code> will finish its job and you'll be ready to install Bricolage. You must run <code>make install</code> as root:
</p>
<div class="example-code">
<pre>  su
  make install</pre>
</div><p class="content">
The installation will take care of everything that needs to be done, including
copying the necessary libraries, Mason components, and configuration files to
their destinations and creating the Bricolage database.
</p>
<p class="content">
Now it's time to start Bricolage. Bricolage comes with a startup script, <u>bric_apachectl</u>, which reads the necessary configuration files, sets the Apache directives it
needs, and fires up Apache. Use this command to start Bricolage:
</p>
<div class="example-code">
<pre>  bric_apachectl start</pre>
</div><p class="content">
Once Bricolage starts, point your browser to the server name you specified
during installation and log in. The default user is &quot;admin&quot; and the
password is &quot;change me now!&quot; I strongly recommend that you take that
advice. In fact, the admin user is a simple default user; you can create a new
user in the Global Admin group for yourself, log out, log back in as the new
user, and delete the admin user altogether if you like. Better yet, just change
the login name of the admin  user.
</p>
<a name="TOC-ANCHOR-2"></a>
<h2>Elements: the Building Blocks of Content</h2><p class="content">
<a name="APP-D-SECT-2"></a>

</p>
<p class="content">
The core of the <a name="perlhtmlmason-IDXTERM-1255"></a>
<a name="perlhtmlmason-IDXTERM-1256"></a>
 Bricolage interface is managing different types of assets through a workflow
process. When you log in, Bricolage presents you with your own private
workspace. Any story, media, or template assets that you have checked out are
listed here (see <a href="appendix-d.mhtml.htm#APP-D-FIG-1" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-1">Figure D-1)</a>, providing easy access for you to edit them, check them in, view their event logs, or delete them. You can also preview a story or media asset -- see how it will look when it gets published -- by clicking its title. You can sort the assets by many of their properties, including title, category, cover date, and priority. The navigation menu on the left side of the screen presents a hierarchical view of the workflows and administrative tools available for your use.
</p>

<p class="content">
<a name="APP-D-FIG-1"></a>
<br />
<img src="mas_ad01.png" tppabs="http://www.masonbook.com/book/figures/mas_ad01.png" width="481" height="426" /><br />
<span class="caption">Figure D-1.  My
 Workspace</span>

</p>
<p class="content">
Descending through the ADMIN =&gt; PUBLISHING =&gt; Elements menus presents the
Bricolage Element Manager (<a href="appendix-d.mhtml.htm#APP-D-FIG-2" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-2">Figure D-2)</a>. The <a name="perlhtmlmason-IDXTERM-1257"></a>
 Element Manager, like all of the Bricolage managers, provides an interface to
search for existing elements for editing or deletion as well as a link to
create new elements. Selecting to edit an element, such as the
default-installed &quot;Book Review&quot; element, brings up the<a name="IXT-D-311"></a>
 Element Profile (<a href="appendix-d.mhtml.htm#APP-D-FIG-3" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-3">Figure D-3)</a>.
</p>

<p class="content">
<a name="APP-D-FIG-2"></a>
<br />
<img src="mas_ad02.png" tppabs="http://www.masonbook.com/book/figures/mas_ad02.png" width="431" height="226" /><br />
<span class="caption">Figure D-2.  The
 Bricolage Element Manager</span>

</p>

<p class="content">
<a name="APP-D-FIG-3"></a>
<br />
<img src="mas_ad03.png" tppabs="http://www.masonbook.com/book/figures/mas_ad03.png" width="431" height="582" /><br />
<span class="caption">Figure D-3.  The
 Book Review story type Element Profile</span>

</p>
<p class="content">
There are essentially three types of elements in Bricolage: those that define
stories, those that define media assets, and subelements of either stories or
media assets. The &quot;Book Review&quot; element shown in <a href="appendix-d.mhtml.htm#APP-D-FIG-3" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-3">Figure D-3</a> is an example of an element that defines the structure of a story, hereafter called a &quot;story type element.&quot;
</p>
<p class="content">
<a href="appendix-d.mhtml.htm#APP-D-FIG-3" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-3">Figure D-3</a> reveals a multitude of relevant data points that describe stories based on this element. In the first section of the profile, the &quot;Burner&quot; select list determines what kind of template will be used to &quot;burn&quot; the content of &quot;Book Review&quot; stories into files. The options supported as of this writing are Mason and <code>HTML::Template</code> . This means that the templates that format the content of &quot;Book
Review&quot; stories are actually Mason components! Other templating
architectures may also be added by the time you read this, but isn't it
fortuitous that Bricolage already supports our favorite?
</p>
<p class="content">
All story type and media type elements are set to publish to particular output
channels. An output channel is a named collection of templates used to output
the content of a story in a particular way. For example, in <a href="appendix-d.mhtml.htm#APP-D-FIG-3" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-3">Figure D-3</a>, notice that the &quot;Book Review&quot; story type element publishes to the &quot;Web&quot; output channel. Other output channels available to this element are &quot;Email,&quot; &quot;Print,&quot; and &quot;WAP.&quot; Should any of these be added to the &quot;Book Review&quot; element, upon publication a story built from the &quot;Book Review&quot; element will be formatted by templates specific to each output channel. In this way, it's possible to publish the same content in multiple ways and to multiple destinations -- a useful feature for maximizing the reach of your content. For example, adding the &quot;WAP&quot; output channel and publishing a story based on the &quot;Book Review&quot; element would format and distribute the content of the story for both the Web and for WAP phones. Bricolage allows you to create as many output channels as necessary to get your content where it needs to go. You'll then just have to create the templates for them (see <a href="appendix-d.mhtml.htm#APP-D-SECT-4" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-SECT-4">&quot;Templates&quot;</a> later in this chapter).
</p>
<p class="content">
Examining sections 3, 4, and 5 of the Element Profile, you'll notice that
Bricolage provides for a great deal of element customization. Section 3,
&quot;EXISTING SUBELEMENTS,&quot; lists subelements of the &quot;Book
Review&quot; element. This list derives from all of the non-media type and
non-story type elements in Bricolage. Furthermore, subelements can themselves
contain subelements. In this way, one can create a structured hierarchy of
elements, and this hierarchy can be as arbitrarily deep as necessary. In this
example, &quot;Page&quot; and &quot;Book Profile&quot; have been added as
subelements of the &quot;Book Review&quot; story type element. Thus, a content
editor building a story based on the &quot;Book Review&quot; element will have
a choice of adding page and book profile subelements. This componentized
architecture closely mirrors Mason's idea of assembling a page from a library
of components -- in fact, if you use the Mason burner, every element has a
one-to-one relationship to a Mason component.
</p>
<p class="content">
Sections 4 and 5 of the &quot;Book Review&quot; story type element profile
illustrate Bricolage's support for custom fields. As an element administrator,
you determine what fields need to be in an element, the default order in which
they appear, and whether they're required or repeatable. Note that one field --
Deck -- has already been added. By using the form in section 5, you can add
more fields and make them any of several familiar types: text box, radio
button, checkbox, select list, and so on.
</p>
<p class="content">
The key to element administration in Bricolage is to think of it in terms of
logical data modeling. Think about how meaningful aggregations of content
(e.g., stories or pages) on your site are structured, and then create the
necessary elements and subelements to model those structures. Then, when
content editors create the content, they'll be presented with only the choices
of elements and fields that adhere to the models you create for them. In this
way, not only do you provide an intuitive interface for your content editors to
work with, but you also assure the integrity of the resulting structure's  content.
</p>
<a name="TOC-ANCHOR-3"></a>
<h2>Content Editing</h2><p class="content">
<a name="APP-D-SECT-3"></a>
<a name="appd-idx-1009753-1"></a>

</p>
<p class="content">
Once you have designed your element hierarchy to meet the needs of your content
editors, those editors can start to create content. <a href="appendix-d.mhtml.htm#APP-D-FIG-4" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-4">Figure D-4</a> illustrates a typical story profile, this one for a story based on the &quot;Book Review&quot; element we examined in the last section. Note that the value for &quot;Story Type&quot; is &quot;Book Review.&quot; In the content editing space, the elements that define stories and media assets are called &quot;story types&quot; or &quot;media types,&quot; respectively, while all other elements are simply called &quot;elements.&quot; This distinction prevents confusing your editors about the difference between elements that are subelements and elements that define stories or media.
</p>

<p class="content">
<a name="APP-D-FIG-4"></a>
<br />
<img src="mas_ad04.png" tppabs="http://www.masonbook.com/book/figures/mas_ad04.png" width="431" height="531" /><br />
<span class="caption">Figure D-4.  A
 story profile for a 'book review' story</span>

</p>
<p class="content">
The first section of the Bricolage story profile, &quot;INFORMATION,&quot;
lists properties of the story common to every story in the system. In addition
to the aforementioned &quot;Story Type&quot; property, notice the
&quot;URI&quot; property. Bricolage constructs this property from the primary
category of the story, the story's cover date, and its slug. The cover date is
an arbitrary date with which to associate the story, while the slug is a kind
of one-word description. Categories, discussed later, make up the directory
structure of your site. Notice that the slug and cover date can be edited;
whenever you change any of these values, Bricolage will automatically update
the URI. Previews are an important function of the URI in the story profile;
click the URI to see how the story will look once it has been formatted by its
templates and published.
</p>
<p class="content">
Other properties managed in this section include the story's source (where the
content comes from) its title, a description, and the expire date. The expire
date is particularly useful, as Bricolage's distribution architecture will
automatically delete the story from your site on this date -- a critical
feature for time-sensitive content.
</p>
<p class="content">
The second section of the story profile, &quot;CONTENT,&quot; provides the
interface for building the meat of your content. The element hierarchy mapped
out in the &quot;Book Review&quot; story type element profile defines the
structure of this section. The &quot;Add Element&quot; button and the select
list next to it offer the elements that one can add to this story. Note that in
the interest of simplicity, the &quot;Add Element&quot; select list offers both
subelements and custom fields as options -- the two concepts are not
distinguished in this interface. The reason for this simplification is that
editors don't really care whether something they're adding to the story is a
subelement or a field; they just know they need to add something -- a deck, a
page, a book profile, and so forth. So all they have to do is pick something
from this list and then click &quot;Add Element&quot; -- no need to stop and
think about whether the thing they want to add is a field or a subelement,
because everything is in one place.
</p>
<p class="content">
A &quot;Deck&quot; and two &quot;Page&quot; elements have been added to the
sample story in <a href="appendix-d.mhtml.htm#APP-D-FIG-4" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-4">Figure D-4</a>. Custom fields such as &quot;Deck&quot; display the values that the editor has put in, while subelements such as &quot;Page&quot; provide buttons to edit those elements. The &quot;Position&quot; select lists allow the editor to easily reorder the elements she has added to the story, while the &quot;Delete&quot; checkboxes allow her to remove nonrequired elements she no longer wants.
</p>
<p class="content">
Sharp readers will have noticed that there are in fact <em>two</em> edit buttons associated with each &quot;Page&quot; element, &quot;Edit&quot;
and &quot;Bulk Edit.&quot; The &quot;Edit&quot; button presents the editor with
an element profile. The element profile essentially mimics the
&quot;CONTENT&quot; section of stories, listing the subelements and fields that
have been added to the element. <a href="appendix-d.mhtml.htm#APP-D-FIG-5" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-5">Figure D-5</a> illustrates the element profile for the first &quot;Page&quot; element in the story profile displayed in <a href="appendix-d.mhtml.htm#APP-D-FIG-4" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-4">Figure D-4</a>. The usual &quot;Position&quot; and &quot;Delete&quot; options are once again available, as is the ability to add more elements. Note that three paragraphs have been added to this element. While it makes sense to add <em>some</em> elements one at a time -- particularly those that can be added only once, such
as the &quot;Deck&quot; field in the story profile -- adding a <em>repeating</em> field over and over disrupts the editing process. No editor wants to interrupt
his editing every time he has to start a new paragraph by stopping to select
&quot;Paragraph&quot; from the select list, click &quot;Add Element,&quot; wait
for the page to reload, scroll down to find the new field, and then continue
with his writing.
</p>

<p class="content">
<a name="APP-D-FIG-5"></a>
<br />
<img src="mas_ad05.png" tppabs="http://www.masonbook.com/book/figures/mas_ad05.png" width="431" height="395" /><br />
<span class="caption">Figure D-5.  A
 page element profile</span>

</p>
<p class="content">
The &quot;Bulk Edit&quot; button addresses this issue. The select list next to
the &quot;Bulk Edit&quot; button lists fields that can be added multiple times
to a story -- in this example, &quot;Paragraph.&quot; Notice that each
repeatable element listed in the story profile illustrated in <a href="appendix-d.mhtml.htm#APP-D-FIG-4" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-4">Figure D-4</a> has a &quot;Bulk Edit&quot; button. The element profile duplicates this interface, so that an editor can jump straight from a list of elements to the bulk edit page for one of the repeatable fields in one of the elements or can edit the element itself in its profile and bulk edit its repeatable fields from there.
</p>
<p class="content">
<a href="appendix-d.mhtml.htm#APP-D-FIG-6" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-6">Figure D-6</a> illustrates the result of selecting &quot;Paragraph&quot; and clicking the &quot;Bulk Edit&quot; button. This interface allows an editor to edit contiguous fields, well, contiguously -- without having to interrupt her train of thought to deal with managing the architecture of the story. She may choose to use whatever field separators she likes (the default is a blank line) and gains the added benefit of word and character counts. In fact, the bulk edit interface is smart enough to properly wrap broken and mangled lines pasted from another application, such as an email client or word processor.
</p>

<p class="content">
<a name="APP-D-FIG-6"></a>
<br />
<img src="mas_ad06.png" tppabs="http://www.masonbook.com/book/figures/mas_ad06.png" width="431" height="341" /><br />
<span class="caption">Figure D-6.  Bulk
 editing paragraphs in a page element</span>

</p>
<p class="content">
Let's return to the story profile in <a href="appendix-d.mhtml.htm#APP-D-FIG-4" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-4">Figure D-4</a>. The third section, &quot;CATEGORIES,&quot; manages the categories in which the story will be published. Each category defines a directory on the filesystem, and because categories may contain subcategories, you can easily construct a meaningful hierarchy for the content on your site. In <a href="appendix-d.mhtml.htm#APP-D-FIG-4" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-4">Figure D-4</a>, the category <u>/tech/reviews/books</u> has been selected, and you can tell from the URI path that it is a subcategory
of <u>/tech/reviews</u>, which is itself a subcategory of <u>/tech</u>, which in turn is a subcategory of the permanent <u>/</u> root category. Upon publication, the story will be written to files in this
category, as reflected in the full URI of the story listed in the
&quot;INFORMATION&quot; section of the story profile. You can add a story to
multiple categories, and it will be written to all of those categories when
published. This feature is useful for stories that cut across categories and
when the categories are formatted differently by their templates. Multiple
categories can even be useful for designating different sites. In that sense,
selecting multiple categories forces the story to be published to multiple
sites. One category is always designated as the primary category and will be
used as the default for previews and for searching for an existing story in
Bricolage.
</p>
<p class="content">
The last section of the story profile defines associations between the story
and other objects in Bricolage -- namely keywords and contributors. Keywords
are exactly what you think they are: keywords associated with the story. Most
often these will be used for creating a <code>keywords</code> metatag in your story HTML files, but it can also be used for archiving,
indexing, search engine populating, and so on. Contributors are the people who
contributed content to a story. Bricolage offers comprehensive features for
managing contributors, including the ability to create types of contributors,
to define custom fields for those types (e.g., &quot;Bio&quot;), and to create
variations (called &quot;roles&quot;) on a given contributor within a type, so
that the same contributor can be used for different stories with different
information in his custom fields.
</p>
<p class="content">
The button bar at the bottom of the story profile provides numerous options for
managing the story. Click &quot;Save&quot; to save the story and return to your
workspace. Click &quot;Save and Stay&quot; to save the story and continue
editing it. Select the &quot;Delete&quot; checkbox and click &quot;Save&quot;
to delete the story. Select a desk from the select list next to the &quot;Check
In&quot; button, click that button, and the story will be saved and checked
into that desk, incrementing the version number in the process. You can revert
to a previous version of the story by selecting a version number from the
select list on the right end of the button bar, and clicking
&quot;Revert.&quot; Click &quot;View&quot; if you just want to see what a
previous version looked like. Click &quot;Cancel&quot; to return to your
workspace without saving your changes, and &quot;Cancel Checkout&quot; to
remove all the changes you made since you checked out (or created) the story
and remove the story from your  workspace.
</p>
<a name="TOC-ANCHOR-4"></a>
<h2>Templates</h2><p class="content">
<a name="APP-D-SECT-4"></a>

</p>
<p class="content">
Because this is a <a name="perlhtmlmason-IDXTERM-1262"></a>
 Mason book, I'm sure you're now saying to yourself, &quot;Self, where's the
Mason? I want to see some code!&quot; This is the section you've been waiting
for. You should have at least skimmed the other sections, though, because in
Bricolage templates are closely tied to elements.
</p>
<p class="content">
As mentioned earlier, non-media type elements in Bricolage are associated with
a &quot;burner.&quot; A burner is merely a templating architecture available
for formatting your content. At the time of this writing, the list includes <code>HTML::Mason</code> and <code>HTML::Template</code>. In the element we examined earlier, the &quot;Book Review&quot; story type
element, the Mason burner was selected. Subelements of the &quot;Book
Review&quot; element were &quot;Page&quot; and &quot;Book Profile,&quot; both
of which also use the Mason burner. Ultimately, this means that the templates
that format the content for these elements are Mason components.
</p>
<p class="content">
<a href="appendix-d.mhtml.htm#APP-D-FIG-7" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-7">Figure D-7</a> illustrates a template profile, <u>book_review.mc</u>, which formats stories created from the &quot;Book Review&quot; story type
element. In Bricolage, templates, like story and media assets, are managed
through workflow. You check them out, make your changes, and check them in.
When you're ready to put them to work formatting your content, you deploy them
from a workflow desk designated for that task. Managing templates through
workflow allows an organization to manage an approval process when necessary,
as well as create various stops that may be necessary to create templates --
e.g., from production (when somebody creates a raw HTML template) to
development (when a Masonite adds the code to do the formatting) to deployment.
</p>

<p class="content">
<a name="APP-D-FIG-7"></a>
<br />
<img src="mas_ad07.png" tppabs="http://www.masonbook.com/book/figures/mas_ad07.png" width="431" height="437" /><br />
<span class="caption">Figure D-7.  A
 book review template profile</span>

</p>
<p class="content">
In <a href="appendix-d.mhtml.htm#APP-D-FIG-7" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-7">Figure D-7</a>, you'll notice that the template looks pretty much like any Mason component. The difference, however, is that the Bricolage burner system makes a number of global objects available to the component. These objects are a <code>$story</code> object, which represents the story itself; an <code>$element</code> object, which represents the element that the template is formatting; and a <code>$burner</code> object, which represents the Bricolage burner executing the Mason template.
These objects provide all the methods you need to get and format story content.
The <code>$story</code> object, for example, allows you to access the primary properties of the story
being burned, such as (in this example), the title: <code>$story-&gt;get_title</code>. Here is the complete <u>book_review.mc</u> template code:
</p>
<div class="example-code">
<pre>  &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
  &lt;!DOCTYPE html
      PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
      &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
  &lt;html&gt;
  &lt;head&gt;&lt;title&gt;&lt;% $story-&gt;get_title %&gt;&lt;/title&gt;&lt;/head&gt;
  
  &lt;body&gt;
  % # Only show this if we are on the first page.
  % unless ($burner-&gt;get_page) {
  &lt;h1&gt;&lt;% $story-&gt;get_title %&gt;&lt;/h1&gt;
  &lt;h3&gt;&lt;% $element-&gt;get_data('deck') %&gt;&lt;/h3&gt;
  &lt;hr /&gt;
  % }
  
  % # Display all the pages of this story.
  % $burner-&gt;display_pages('page');
  &lt;h4&gt;Page &lt;% $burner-&gt;get_page + 1 %&gt;&lt;/h4&gt;
  
  &lt;/body&gt;
  &lt;/html&gt;</pre>
</div><p class="content">
The <code>$element</code> object allows you to retrieve the custom data attached to the element that's
currently being formatted (remember, elements are hierarchically created, so
you can have many elements for a given story). The example retrieves the
contents of the &quot;Deck&quot; field from the story element: <code>$element-&gt;get_data('deck')</code>. The <code>$element</code> object also offers properties to retrieve the subelements added to the story.
Note that, in <a href="appendix-d.mhtml.htm#APP-D-FIG-7" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-7">Figure D-7</a>, the fields listed above the Mason code provide a cheat sheet listing what &quot;Data Elements&quot; (fields) and &quot;Container Elements&quot; (subelements) are available.
</p>
<p class="content">
The <code>$burner</code> object provides special methods that allow you to affect the burn process
itself. In this example, <code>$burner-&gt;display_pages('page')</code> causes the burner to execute the relevant template for the &quot;Page&quot;
element for each page element in the story. Pages in Bricolage are elements of
a specific type that have been marked as pages in the UI (see <a href="appendix-d.mhtml.htm#APP-D-FIG-8" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-8">Figure D-8)</a>. The &quot;Page&quot; element happens to be an element of an element type that's marked &quot;Page&quot; (makes sense, don't it?), so we can use the <code>display_pages()</code> method to burn &quot;Page&quot; elements. The burner is smart enough to find
the proper template and use it to format each page.
</p>

<p class="content">
<a name="APP-D-FIG-8"></a>
<br />
<img src="mas_ad08.png" tppabs="http://www.masonbook.com/book/figures/mas_ad08.png" width="431" height="228" /><br />
<span class="caption">Figure D-8.  The
 'Pages' element type profile</span>

</p>
<p class="content">
The <code>display_pages()</code> method formats each page in the context of the template that calls it. Thus,
all of the Mason code on either side of the call to <code>$burner-&gt;display_pages('page')</code> is executed for every page in the story. This is similar to the Mason <code>$m-&gt;call_next</code> method in that the context of the surrounding code always remains intact for
each page; but unlike <code>$m-&gt;call_next</code>, <code>$burner-&gt;display_pages</code> writes each page of the story to a separate file. This functionality allows
the burner to determine how many pages a story has and how many to burn to the
filesystem without you as the template developer needing to worry about it. All
you need to do in that context is to determine the page number, when necessary,
to display contextual information that varies depending on the page.
</p>
<p class="content">
The <u>book_profile.mc</u> template, listed earlier, does just that: because Bricolage elements are
ordered as a Perl array, the first page element is 0, the second page is 1, and
so on. Thus it's a straightforward matter to determine what page is currently
being burned and therefore what contextual data to display. Here, the title and
deck go on only the first page (<code>$burner-&gt;get_page</code> returns 0, or false), and page number labels get displayed by simply adding 1
to every call to <code>get_page()</code>.
</p>
<p class="content">
The <u>page.mc</u> template uses the same approach to add links to the different pages in a
story. Here is a sample <u>page.mc</u> template:
</p>
<div class="example-code">
<pre>  &lt;!-- Start &quot;Page&quot; --&gt;
  &lt;%perl&gt;;
  # Display all elements except 'prev' and 'next'.
  foreach my $e ($element-&gt;get_elements) {
      next if $e-&gt;has_name('prev') || $e-&gt;has_name('next');
      if ($e-&gt;has_name('paragraph')) {
          $m-&gt;print('&lt;p&gt;'. $e-&gt;get_data . &quot;&lt;/p&gt;\n&quot;);
      } else {
          $burner-&gt;display_element($e);
      }
  }
  
  $m-&gt;print(&quot;\n&lt;hr /&gt;\n\n&quot;);
  
  # Get file name info from the output channel.
  my $oc = $burner-&gt;get_oc;
  my $filename = $oc-&gt;get_filename;
  my $file_ext = $oc-&gt;get_file_ext;
  
  # $burner numbers pages from '0' not '1'.
  my $pnum = $burner-&gt;get_page + 1;
  
  # Show 'previous' link
  if (my $prev = $element-&gt;get_data('previous')) {
      my $pageindex = $pnum-2 != 0 ? $pnum-2 : '';
      my $prev_pnum = $pnum - 1;
      $m-&gt;print(qq{&lt;p&gt;&lt;a href=&quot;$filename$pageindex.$file_ext&quot;&gt;}
                . qq{&amp;lt;-- $prev $prev_pnum&lt;/a&gt;&lt;/p&gt;});
  }
  
  # Show 'next' link
  if (my $next = $element-&gt;get_data('next')) {
      $m-&gt;print(qq{&lt;p&gt;&lt;a href=&quot;$filename$pnum.$file_ext&quot;&gt;}
                . qq{$next --&gt;&lt;/a&gt;&lt;/p&gt;});
  }
  &lt;/%perl&gt;
  &lt;!-- End &quot;Page&quot; --&gt;</pre>
</div><p class="content">
The first thing you'll notice is a new method call, <code>$element-&gt;get_elements</code>. This method returns a list of all the subelements and field elements of the
current element in the order specified by the editor in the story profile. Note
that in this template the <code>$element</code> object represents the &quot;Page&quot; element currently getting burned,
rather than the story type element; the global <code>$element</code> object <em>always</em> represents the current element relevant to the template. Since the elements
returned by <code>$element-&gt;get_elements</code> can be either subelements or fields, we use <code>has_name()</code> to check each one so that, based on our knowledge of the story structure, we
can decide what to do with each element.
</p>
<p class="content">
In this example, we choose to skip the <code>'next'</code> and <code>'previous'</code> elements because they'll be handled later. The ' <code>paragraph'</code> elements, on the other hand, are formatted as one would expect, while any
other elements are merely passed to <code>$burner-&gt;display_element</code>. This method, like the <code>display_pages()</code> method, finds the relevant template for the element, formats the element, and
adds it to the output of the template. It differs from the <code>display_pages()</code> method in that it doesn't output a separate page for each element. In this
respect, it somewhat resembles Mason's <code>$m-&gt;comp</code> method, although it takes no other arguments.
</p>
<p class="content">
The rest of the <em>page.mc</em> element is given over to creating links to the previous and next pages of the
story. Bricolage outputs all pages according to a strict set of rules: a) all
pages for a single story are in the same directory; b) each file is named
according to the filenaming properties of the current output channel; and c)
pages 2 and up get a number attached to the base name of the file. So if the
current output channel has its <code>'filename'</code> property set to <code>'index'</code> and its <code>'file_ext'</code> property set to <code>'html'</code> , the filenames of a story will be <u>index.html</u>, <u>index1.html</u>, <u>index2.html</u>, and so on. The previous <u>page.mc</u> template draws on this knowledge to create links to the previous and next
pages in the story -- if, that is, the story editor filled in values for the <code>'next'</code> or <code>'previous'</code> fields.
</p>
<p class="content">
<a href="appendix-d.mhtml.htm#APP-D-FIG-9" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-9">Figure D-9</a> illustrates the result of previewing the story shown in <a href="appendix-d.mhtml.htm#APP-D-FIG-4" tppabs="http://www.masonbook.com/book/appendix-d.mhtml#APP-D-FIG-4">Figure D-4</a>.
</p>

<p class="content">
<a name="APP-D-FIG-9"></a>
<br />
<img src="mas_ad09.png" tppabs="http://www.masonbook.com/book/figures/mas_ad09.png" width="481" height="398" /><br />
<span class="caption">Figure D-9.  A
 preview of a book review story</span>

</p>
<a name="TOC-ANCHOR-5"></a>
<h2>Where to Learn More</h2><p class="content">
<a name="APP-D-SECT-5"></a>

</p>
<p class="content">
Although the componentized architecture for building and formatting content
constitutes the core functionality of Bricolage, this brief introduction has
but scratched the surface of what's possible in this flexible application.
Element design and implementation is an art of its own, and the templates, of
course, feature all of the flexibility and power of Perl. But there's more.
Bricolage offers a vast array of <a name="IXT-D-313"></a>
 features commonly found in commercial CMSs. Here's a partial list of some of
the features not mentioned earlier:
</p>
<ul>
<li>
Autohandler-type templates</li>
<li>
Scheduled publishing</li>
<li>
Content files distributed to production web servers</li>
<li>
Event-based alerting</li>
<li>
Filtering actions applied to content files</li>
<li>
Complete user and group administration</li>
<li>
A fine-grained permission architecture</li>
<li>
A SOAP server for:<ul>
<li>
Importing and exporting assets</li>
<li>
Automatically publishing content</li>
<li>
Mass publishing content</li>
<li>
Loads of other things no one has even thought of yet
</ul>

</ul>
<p class="content">
To learn more about Bricolage, visit its home page, <a href="tppmsgs/msgs0.htm#70" tppabs="http://www.bricolage.cc/">http://www.bricolage.cc/</a><a name="IXT-D-314"></a>
 . There you'll find user documentation to help get you started, the complete
API documentation, more screen shots, and links to downloads of the latest
version. There are also active discussion lists (and their archives) for
Bricolage users and developers. Feel free to join the fun!
</p>

<h4>Footnotes</h4>
<a name="FOOTNOTE-ANCHOR-1"></a>
<p class="content">
1. Thanks to Tels' <code>Dev::Bollocks</code> module for these lovely aphorisms. -- <a href="#RETURN-ANCHOR-1">Return</a>.
</p>
<hr>
<p class="book-menu">
<a href="index.mhtml.htm" tppabs="http://www.masonbook.com/book/index.mhtml">Table of Contents</a>
|
<a href="foreword.mhtml.htm" tppabs="http://www.masonbook.com/book/foreword.mhtml">Foreword</a>
|
<a href="preface.mhtml.htm" tppabs="http://www.masonbook.com/book/preface.mhtml">Preface</a>
<br>
Chapters: 
<a href="chapter-1.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-1.mhtml">1</a>
<a href="chapter-2.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-2.mhtml">2</a>
<a href="chapter-3.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-3.mhtml">3</a>
<a href="chapter-4.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-4.mhtml">4</a>
<a href="chapter-5.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-5.mhtml">5</a>
<a href="chapter-6.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-6.mhtml">6</a>
<a href="chapter-7.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-7.mhtml">7</a>
<a href="chapter-8.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-8.mhtml">8</a>
<a href="chapter-9.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-9.mhtml">9</a>
<a href="chapter-10.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-10.mhtml">10</a>
<a href="chapter-11.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-11.mhtml">11</a>
<a href="chapter-12.mhtml.htm" tppabs="http://www.masonbook.com/book/chapter-12.mhtml">12</a>
<br>
Appendices:
<a href="appendix-a.mhtml.htm" tppabs="http://www.masonbook.com/book/appendix-a.mhtml">A</a>
<a href="appendix-b.mhtml.htm" tppabs="http://www.masonbook.com/book/appendix-b.mhtml">B</a>
<a href="appendix-c.mhtml.htm" tppabs="http://www.masonbook.com/book/appendix-c.mhtml">C</a>
<b>D</b>
<br>
<a href="glossary.mhtml.htm" tppabs="http://www.masonbook.com/book/glossary.mhtml">Glossary</a>
|
<a href="colophon.mhtml.htm" tppabs="http://www.masonbook.com/book/colophon.mhtml">Colophon</a>
|
<a href="copyright.mhtml.htm" tppabs="http://www.masonbook.com/book/copyright.mhtml">Copyright</a>
</p>

<p>
These HTML pages were created by running <a
href="book_as_html" tppabs="http://www.masonbook.com/book/book_as_html">this script</a> against the <a
href="mason-book.tar.gz" tppabs="http://www.masonbook.com/book/mason-book.tar.gz">pseudo-POD source</a>.
</p>





  </div>

 </div>

</div>

</body>
</html>
